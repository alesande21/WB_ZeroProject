// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	_ "encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	entity2 "WB_ZeroProject/internal/entity"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	_ "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка заказов
	// (GET /api/orders)
	GetOrders(w http.ResponseWriter, r *http.Request, params entity2.GetOrdersParams)
	// Создание нового заказа
	// (POST /api/orders/new)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Получение заказа по идентификатору
	// (GET /api/orders/{order_uid})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderUid entity2.OrderId)
	// Првоерка доступности сервера
	// (GET /api/ping)
	GetApiPing(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params entity2.GetOrdersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_uid" -------------
	var orderUid entity2.OrderId

	err = runtime.BindStyledParameter("simple", false, "order_uid", mux.Vars(r)["order_uid"], &orderUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderUid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiPing operation middleware
func (siw *ServerInterfaceWrapper) GetApiPing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/orders", wrapper.GetOrders).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/orders/new", wrapper.CreateOrder).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/orders/{order_uid}", wrapper.GetOrderById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ping", wrapper.GetApiPing).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
