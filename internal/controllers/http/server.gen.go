// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	_ "encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	entity2 "WB_ZeroProject/internal/entity"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	_ "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка заказов
	// (GET /api/orders)
	GetOrders(w http.ResponseWriter, r *http.Request, params entity2.GetOrdersParams)
	// Создание нового заказа
	// (POST /api/orders/new)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Получение заказа по идентификатору
	// (GET /api/orders/{order_uid})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderUid entity2.OrderId)
	// Првоерка доступности сервера
	// (GET /api/ping)
	GetApiPing(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params entity2.GetOrdersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_uid" -------------
	var orderUid entity2.OrderId

	err = runtime.BindStyledParameter("simple", false, "order_uid", mux.Vars(r)["order_uid"], &orderUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderUid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiPing operation middleware
func (siw *ServerInterfaceWrapper) GetApiPing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiPing(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/orders", wrapper.GetOrders).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/orders/new", wrapper.CreateOrder).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/orders/{order_uid}", wrapper.GetOrderById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ping", wrapper.GetApiPing).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
