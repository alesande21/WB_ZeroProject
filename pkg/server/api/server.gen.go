// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Delivery defines model for Delivery.
type Delivery struct {
	Address string              `json:"address"`
	City    string              `json:"city"`
	Email   openapi_types.Email `json:"email"`
	Id      int64               `json:"id"`
	Name    string              `json:"name"`
	Phone   string              `json:"phone"`
	Region  string              `json:"region"`
	Zip     string              `json:"zip"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Item defines model for Item.
type Item struct {
	Brand       string  `json:"brand"`
	ChrtId      int64   `json:"chrt_id"`
	NmId        int64   `json:"nm_id"`
	Price       float64 `json:"price"`
	Rid         string  `json:"rid"`
	Sale        float64 `json:"sale"`
	Size        string  `json:"size"`
	Status      int32   `json:"status"`
	TotalPrice  float64 `json:"total_price"`
	TrackNumber string  `json:"track_number"`
}

// Order defines model for Order.
type Order struct {
	CustomerId        string    `json:"customer_id"`
	DateCreated       time.Time `json:"date_created"`
	Delivery          Delivery  `json:"delivery"`
	DeliveryService   string    `json:"delivery_service"`
	Entry             string    `json:"entry"`
	InternalSignature string    `json:"internal_signature"`
	Items             []Item    `json:"items"`
	Locale            string    `json:"locale"`
	OofShard          string    `json:"oof_shard"`
	OrderUid          string    `json:"order_uid"`
	Payment           Payment   `json:"payment"`
	Shardkey          string    `json:"shardkey"`
	SmId              int64     `json:"sm_id"`
	TrackNumber       string    `json:"track_number"`
}

// Orders defines model for Orders.
type Orders = []Order

// Payment defines model for Payment.
type Payment struct {
	Amount       float64 `json:"amount"`
	Bank         string  `json:"bank"`
	Currency     string  `json:"currency"`
	CustomFee    float64 `json:"custom_fee"`
	DeliveryCost float64 `json:"delivery_cost"`
	GoodsTotal   float64 `json:"goods_total"`
	PaymentDt    float64 `json:"payment_dt"`
	Provider     string  `json:"provider"`
	RequestId    string  `json:"request_id"`
	Transaction  string  `json:"transaction"`
}

// StatusMessage defines model for StatusMessage.
type StatusMessage struct {
	Message string `json:"message"`
}

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = Orders

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /orders)
	GetOrders(w http.ResponseWriter, r *http.Request)
	// Создание и добавление заказа
	// (POST /orders)
	CreateOrder(w http.ResponseWriter, r *http.Request)
	// Получение команды по идентификатору
	// (GET /orders/{order_uid})
	ShowOrderById(w http.ResponseWriter, r *http.Request, orderUid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateOrder(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ShowOrderById operation middleware
func (siw *ServerInterfaceWrapper) ShowOrderById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_uid" -------------
	var orderUid string

	err = runtime.BindStyledParameter("simple", false, "order_uid", mux.Vars(r)["order_uid"], &orderUid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowOrderById(w, r, orderUid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/orders", wrapper.GetOrders).Methods("GET")

	r.HandleFunc(options.BaseURL+"/orders", wrapper.CreateOrder).Methods("POST")

	r.HandleFunc(options.BaseURL+"/orders/{order_uid}", wrapper.ShowOrderById).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWXW8jNRT9KyPDY2i6W8RDHhcQ6gNipeVtVY2cmZvE24w92J5Atoq03SKxEg888gZC",
	"/IHsqlVDl6Z/4c4/QrbnM3HaiVjBWzK+Y597zrlnfEYikaSCA9eKDM6IiiaQUPvzC5iyGci5+Z1KkYLU",
	"DOwKjWMJyv7U8xTIgCgtGR+TRY9ETM+9C5BQNjUrIyETqsmgeNLbLmVxq45x/dmndR3jGsYgTSGnCXgP",
	"SyeC+1ckjJng3qWXLPU8t+98lzEJMRk8N9iKc8tT3ItF572KnOqosvWTqgMxfAGRNkd+KaWQ2wRHIoZN",
	"Co4eeylIQCk6hoeB2z3reh+aYw3JNpihpDz2az2ROuwuVtK9NpUsajMQi2w4hbqYZ8nQ1UrmR6fotOsW",
	"ir30u0VpqjPVUQotNJ2G+0DXkkanYfH/YQULujfeK9lyTFTmtO0XrbWxlVL0CmmrNn2e+EbG4HNoprRI",
	"QIY7yI+phjCSQDW0NTcLn2iWgG/w40bkfCxhRAbko34dUP0infpVNDXeCRXIWUH9dvhwLf2xZPSTnE5D",
	"xcac6kz6N2AaEtt49eM+fHaQFlWDVEpqsU5FVJhy6wAhRqGaUOmnUxgVwmwH2SmdJ8D1Q6ieFmXG1+ak",
	"U/BTovYY1P0cXLex5WGnUMMCdVsl+xV/XtV6LU96fNHouuxxw6dNFXbOQncXuNHx2OBprdfGhzURmXve",
	"ITyGlJ/6YzmTEng037FoSApH0DWjKh4jobpCGwsRq9BmTsc3Cq3DuOsRqRQzFntN5zwHSu8KJy0pVzTS",
	"/ovAhmebxa2dG0Q34PRKEVs9FWptstlmqiWOz3/PbEx/XX/x2+7pfBXYfQdY2EQcCbsH0yarCtcHZoxs",
	"fzOQyjJHHh0cHhzaeEqB05SRATk6ODw4sr3riQXVF9XQjMGKayBTQ+dxTAbkK9DFWBmMKhVcuW4eHx66",
	"qxDXxazQNJ2yyL7af6Gcdm7W9htJtT2TC2t0FUmWOlcQ/DM/xzu8yt/gLa4DvMM1vs8v8p/wCm8Du7bK",
	"z3GNNwFe4xJvcInXuMZ3bmZGNJvqvfDfB9tdE30of8vf4ArfmuMtRgfmLn+F6/w8v2hiW7oN0mKM2zJ8",
	"biPQJVbl8icinn+wHkrq22bUMoPFlvKPPtip7ZHxMfhrSVCQX7Qkt+pe4yUu8fY/FTXj8EMKkYY4gKKm",
	"R1SWJNTcYQj+UePCFV4FuArwEtf4Fpf4Dt8bg7rnTe17RNOxqj7CipyYXYvp7J9VX+bFzkl9NhHfWxGf",
	"zI9jO+KSJqDtcD8/2+jh2wkELA7EKNATCOzugRaBBC0ZzNwnnAxsTJRX1kHretC2SK/B6Wa2nfzL4Ojw",
	"Cb/XNm7sVnhpiM9f4yr/EVdmLX+N6/yVGcJbXOJfruD/jYc6wnCV/9JyyMN9bPrw9/Z+xnE3uMa/rTEv",
	"85877Ohz5WLxTwAAAP//r/dp3JUQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
