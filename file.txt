producerEnv:
KAFKA_CONN=localhost:9092;KAFKA_HOST=127.0.0.1;KAFKA_PORT=9092;KAFKA_TOPIC=orders.event.request;POSTGRES_CONN=host=127.0.0.1 port=5432 user=postgres password=postgres dbname=postgres sslmode=disable;POSTGRES_DATABASE=postgres;POSTGRES_HOST=127.0.0.1;POSTGRES_PASSWORD=postgres;POSTGRES_PORT=5432;POSTGRES_USERNAME=postgres;SERVER_ADDRESS=localhost:8080
# Используем официальный образ Go в качестве базового образа для сборки
FROM golang:1.22 AS builder
LABEL authors="alesande"

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы go.mod и go.sum и загружаем зависимости
COPY go.mod go.sum ./
RUN go mod download

# Копируем исходный код приложения
COPY . .

# Сборка приложения
RUN CGO_ENABLED=1 GOOS=linux go build -o wb_service ./cmd/producer && ls && ls -la /app/

# Финальный образ
FROM alpine:latest

# Устанавливаем необходимые пакеты
RUN apk --no-cache add ca-certificates postgresql-client

# Создаем директорию для приложения
WORKDIR /app

# Копируем скомпилированный бинарник из стадии сборки
COPY --from=builder /app/wb_service /app/wb_service

# Делаем бинарный файл исполняемым
RUN chmod +x /app/wb_service

# Настройка порта, который будет использоваться
EXPOSE 8080

# Определяем точку входа
ENTRYPOINT ["/app/wb_service"]
#ENTRYPOINT ["/bin/sh"]
consumerEnv:
KAFKA_CONN=localhost:9092;KAFKA_HOST=127.0.0.1;KAFKA_PORT=9092;KAFKA_TOPIC=orders.event.response;POSTGRES_CONN=host=127.0.0.1 port=5432 user=postgres password=postgres dbname=postgres sslmode=disable;POSTGRES_DATABASE=postgres;POSTGRES_HOST=127.0.0.1;POSTGRES_PASSWORD=postgres;POSTGRES_PORT=5432;POSTGRES_USERNAME=postgres;SERVER_ADDRESS=localhost:8080